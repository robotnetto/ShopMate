@page "/weather"
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<MudAppBar Color="Color.Inherit">
    <MudIcon Icon="@Icons.Material.Filled.MyLocation" Color="Color.Inherit" />
    <MudText Class="ml-2" Typo="Typo.h6" Color="Color.Inherit">Store</MudText>
    <MudSpacer />
</MudAppBar>

<MudElement Class="progress-container d-flex justify-content-center" style="position: fixed; top: 57px; left: 50%; transform: translate(-50%, 0); width: 102%; z-index: 1000;">
    <div class="search-bar d-flex align-items-center">
        <MudTextField @bind-Value="searchQuery" Label="Search for store" Variant="Variant.Outlined" Class="search-input" />
        <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="OnSearch" Class="search-button"></MudIconButton>
    </div>
</MudElement>

<div class="search-container">
    @if (isLoading)
    {
        <div class="loading-indicator">
            <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        </div>
    }
    else if (!locations.Any())
    {
        <div class="loading-indicator">
            <MudIcon Class="shop-icon-big" Icon="@ShopIcon.Map" />
        </div>
    }
    else if (locations.Any())
    {
        <ul class="results-list">
            @foreach (var location in locations)
            {
                <li @onclick="() => OnLocationSelected(location)">
                    <strong>@location.Name</strong>
                    <p>@location.Address</p>
                    <p>Distance: @location.Distance.ToString("F1") km</p>
                </li>
            }
        </ul>
    }

</div>

@code {
    private string searchQuery;
    private bool isLoading = false; 
    private List<LocationData> locations = new();
    private const string GoogleApiKey = "AIzaSyC1hsMxPaqO70V1QQzkvtuCd_lZUIDxRI0";

    private async Task OnSearch()
    {
        isLoading = true; 
        try
        {
            var location = await Geolocation.GetLocationAsync();
            if (location != null)
            {
                await FetchLocationsAsync(location.Latitude, location.Longitude, searchQuery, 20);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Unable to get current location.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false; 
        }
    }

    private async Task FetchLocationsAsync(double latitude, double longitude, string query, double radiusKm)
    {
        var url = $"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={latitude},{longitude}&radius={radiusKm * 1000}&keyword={query}&key={GoogleApiKey}";

        try
        {
            var response = await HttpClient.GetFromJsonAsync<GooglePlacesResponse>(url);


            if (response?.Results != null)
            {
                locations = response.Results
                    .Where(r => r.Geometry?.Location != null && r.Name.Contains(query, StringComparison.OrdinalIgnoreCase))
                    .Select(r => new LocationData
                    {
                        Name = r.Name,
                        Address = r.Vicinity,
                        Latitude = r.Geometry?.Location?.Lat ?? 0, 
                        Longitude = r.Geometry?.Location?.Lng ?? 0, 
                        Distance = CalculateDistance(latitude, longitude, r.Geometry.Location.Lat, r.Geometry.Location.Lng)
                    })
                    .OrderBy(l => l.Distance).ThenBy(n => n.Name)
                    .ToList();
            }
            else
            {
                locations.Clear();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error fetching locations: {ex.Message}");
        }
    }

    private void OnLocationSelected(LocationData location)
    {
        var uri = $"https://www.google.com/maps/search/?api=1&query={location.Name},{location.Address}";
        Navigation.NavigateTo(uri, true);
    }

    private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)
    {
        const double R = 6371; // Radius of the earth in km
        var latDistance = DegreesToRadians(lat2 - lat1);
        var lonDistance = DegreesToRadians(lon2 - lon1);
        var a =
            Math.Sin(latDistance / 2) * Math.Sin(latDistance / 2) +
            Math.Cos(DegreesToRadians(lat1)) * Math.Cos(DegreesToRadians(lat2)) *
            Math.Sin(lonDistance / 2) * Math.Sin(lonDistance / 2);
        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        var distance = R * c; // in km
        return distance;
    }

    private double DegreesToRadians(double degrees)
    {
        return degrees * (Math.PI / 180);
    }
    public class LocationData
    {
        public string Name { get; set; }
        public string Address { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double Distance { get; set; } //  in kilometers
    }
    public class GooglePlacesResponse
    {
        public List<PlaceResult> Results { get; set; }

        public class PlaceResult
        {
            public string Name { get; set; }
            public string Vicinity { get; set; }
            public PlaceGeometry Geometry { get; set; }

            public class PlaceGeometry
            {
                public Coordinates Location { get; set; }

                public class Coordinates
                {
                    public double Lat { get; set; }
                    public double Lng { get; set; }
                }
            }
        }
    }
}
