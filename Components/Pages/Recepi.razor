@page "/"
@inject IDialogService DialogService
@inject IRecipe Recipe
@inject NavigationManager nav


@* -----Topbar---- *@
<MudAppBar Color="Color.Inherit">
    <MudIcon Icon="@Icons.Material.Outlined.RamenDining" Color="Color.Inherit" />
    <MudText Class="ml-2" Typo="Typo.h6" Color="Color.Inherit">My Recipes</MudText>
    <MudSpacer />

    <MudButton Variant="Variant.Text" DisableRipple="false" EndIcon="@Icons.Material.Filled.Add" Color="Color.Inherit" OnClick="@(()=> OpenDrawer(Options.New))">Add</MudButton>

</MudAppBar>

<MudCheckBox class="mb-n4" @bind-Value="@orderByFav"  Label="Show favorit first" LabelPosition="LabelPosition.Start"></MudCheckBox>

@* ----Content---- *@
@if (allrecipes == null || !allrecipes.Any() || hasError)
{
   
    <MudElement Class="loading-indicator">
        <MudIcon Class="shop-icon-big" Icon="@ShopIcon.Recipe" />
        <MudText>@Message</MudText>
    </MudElement>
}
else
{

    @foreach (var item in GetOrderedRecipe())
    {
        <MudStack AlignItems="AlignItems.Center" Class="mt-6">

            <MudCard Style="width: 90%;" Elevation="3" Class="card-container ">
                @if (string.IsNullOrEmpty(item.ImageStream))
                {
                    <MudElement Class="d-flex my-2 justify-content-center align-items-center">
                        <MudIcon Icon="@Icons.Material.Filled.HideImage" Size="Size.Large" />
                    </MudElement>

                }
                else
                {
                    <a href="@($"description/{item.Id}")">
                        <MudCardMedia Image="@item.ImageStream" Height="150" />
                    </a>
                }
                <MudCardContent Class="mt-n3 ">
                    <MudButton Variant="Variant.Text" Href="@($"description/{item.Id}")" Color="Color.Inherit">@item.Title</MudButton>

                </MudCardContent>
                <MudCardActions Class="mt-n9 ">
                    <MudCheckBox Class="ml-3" @bind-Value="@item.Favorite" Color="Color.Secondary" @oninput="()=> HandleFavoriteChange(item)" CheckedIcon="@Icons.Material.Filled.Favorite" UncheckedIcon="@Icons.Material.Filled.FavoriteBorder"></MudCheckBox>

              <MudSpacer />

                    <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" OnClick="@(()=>{ selectedRecipe = item; OpenDrawer(Options.Setting);})" />
                </MudCardActions>

            </MudCard>
        </MudStack>

    }
}
@* ----Settings Drawer---- *@
<MudDrawer @bind-Open="@settingsDrawer" Anchor="Anchor.Bottom" Elevation="4" Variant="DrawerVariant.Temporary" Color="Color.Inherit" Breakpoint="Breakpoint.LgAndUp" Style="height: auto; max-height: 30vh;">
    <MudElement Class="d-flex flex-column flex-grow-1 ma-4 justify-content-center align-items-center">
        <MudDrawerHeader Class="pl-1">
            <MudText Typo="Typo.h6">Settings</MudText>
        </MudDrawerHeader>

        <MudElement Class="d-flex justify-space-around flex-grow-1 gap-8">
            <MudElement Class="icon-wrapper">
                <MudFab StartIcon="@Icons.Material.Filled.DriveFileRenameOutline" Size="Size.Large" Color="Color.Tertiary" OnClick="@( () => OpenDrawer(Options.Edit) )" />
                <MudText Class="mt-2" Typo="Typo.body2" Align="Align.Center">Edit</MudText>
            </MudElement>

            <MudElement Class="icon-wrapper">
                <MudFab StartIcon="@Icons.Material.Filled.Share" Size="Size.Large" Color="Color.Info" OnClick=" OnShareList" />
                <MudText Class="mt-2" Typo="Typo.body2" Align="Align.Center">Share</MudText>
            </MudElement>

            <MudElement Class="icon-wrapper">
                <MudFab StartIcon="@Icons.Material.Filled.Delete" Size="Size.Large" Color="Color.Error" OnClick="@(() => DeleteRecipe(selectedRecipe))" />
                <MudText Class="mt-2" Typo="Typo.body2" Align="Align.Center">Delete</MudText>
            </MudElement>

        </MudElement>
    </MudElement>
</MudDrawer>

@* ----Edit---- *@
<MudDrawer @bind-Open="@editRecipeDrawer" Anchor="Anchor.Bottom" Elevation="3" Variant="@DrawerVariant.Temporary" Color="Color.Inherit">

    <DrawForm Recipe="@selectedRecipe" type="ObjectType.Recipe" AddAndEditRecipe="UpdateRecipe" options="@Options.Edit" />

</MudDrawer>

@* ----Add---- *@
<MudDrawer @bind-Open="@newRecipeDrawer" Anchor="Anchor.Bottom" Elevation="3" Variant="@DrawerVariant.Temporary" Color="Color.Inherit">

    <DrawForm  AddAndEditRecipe="AddNewRecipe" type="ObjectType.Recipe" options="@Options.New" />

</MudDrawer>


@code {
    // public Recipe _Recipe = new();
    private IEnumerable<Recipe>? allrecipes { get; set; }
    bool orderByFav = false;
    bool newRecipeDrawer;
    bool settingsDrawer;
    bool editRecipeDrawer;
    string Message = string.Empty;
    // private bool hasValue => !(string.IsNullOrEmpty(recipe.Title));
    private bool hasError;
    public Recipe selectedRecipe = new();


    void OpenDrawer(Options options)
    {

        if (options == Options.Edit)
        {
            settingsDrawer = false;
            newRecipeDrawer = false;
            editRecipeDrawer = true;

        }
        else if (options == Options.New)
        {
            settingsDrawer = false;
            editRecipeDrawer = false;
            newRecipeDrawer = true;


        }
        else if (options == Options.Setting)
        {
            editRecipeDrawer = false;
            newRecipeDrawer = false;
            settingsDrawer = true;

        }

    }
    protected async override Task OnInitializedAsync()
    {
        App.Current.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().UseWindowSoftInputModeAdjust(WindowSoftInputModeAdjust.Resize);
        await LoadRecipesAsync();
    }

    private async Task HandleFavoriteChange(Recipe recipe)
    {
        await UpdateRecipe(recipe);

    }

    private async Task OnShareList()
    {

        var itemList = new StringBuilder();
        itemList.AppendLine($"{selectedRecipe.Title}");
        itemList.AppendLine("Detail:");
        itemList.AppendLine(selectedRecipe.Description);


        await Share.RequestAsync(new ShareTextRequest
            {

                Text = itemList.ToString()
            });


    }

    private IEnumerable<Recipe> GetOrderedRecipe()
    {
        if (orderByFav)
        {
            return allrecipes!.OrderByDescending(i => i.Favorite);
        }
        return allrecipes!;
    }

    private async Task LoadRecipesAsync()
    {
        hasError = false;
        try
        {
            allrecipes = await Recipe.GetAllAsync();
            if (!allrecipes.Any())
            {
                Message = "Add new recipe";

            }

            StateHasChanged();

        }
        catch (Exception ex)
        {
            Message = ex.Message;
            hasError = true;
            StateHasChanged();
        }
    }

    private async Task AddNewRecipe(Recipe recipe)
    {
        if (recipe != null)
        {
            hasError = false;
            try
            {
                await Recipe.CreateAsync(recipe);
                newRecipeDrawer = false;

                await LoadRecipesAsync();

            }
            catch (Exception ex)
            {
                Message = ex.Message;
                hasError = true;
                StateHasChanged();
            }

        }
    }
    private async Task UpdateRecipe(Recipe recipe)
    {
        if (recipe.Id != 0)
        {
            await Recipe.UpdateAsync(recipe);
            editRecipeDrawer = false;
        }
    }

    private async Task DeleteRecipe(Recipe recipe)
    {
        hasError = false;
        try
        {
            if (recipe != null)
            {
                await Recipe.DeleteAsync(recipe);
                settingsDrawer = false;
                await LoadRecipesAsync();

            }
        }
        catch (Exception ex)
        {
            Message = ex.Message;
            hasError = true;
            StateHasChanged();
        }
    }
 
}