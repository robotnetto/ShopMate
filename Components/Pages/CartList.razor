@page "/counter"
@inject IShopCart ShopCart

<MudAppBar Color="Color.Inherit">
    <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCheck" Color="Color.Inherit" />
    <MudText Class="ml-2" Typo="Typo.h6" Color="Color.Inherit">My List</MudText>
    <MudSpacer />

    <MudButton Variant="Variant.Text" DisableRipple="false" EndIcon="@Icons.Material.Filled.Add" Color="Color.Inherit" OnClick="@(()=> OpenDrawer(Options.New))">Add</MudButton>

</MudAppBar>

@* ----Content---- *@
@if (ShopListCart == null || !ShopListCart.Any() || hasError)
{
    <MudElement Class="loading-indicator">
        <MudIcon Class="shop-icon-big" Icon="@ShopIcon.Cart" />
        <MudText>@Message</MudText>
    </MudElement>
}
else
{
    foreach (var item in ShopListCart)
    {
        <MudStack AlignItems="AlignItems.Center" Class="mt-5">
            <MudCard Style="width: 90%;" Elevation="3" Class="card-container ">

                <MudCardHeader>
                    <CardHeaderContent>
                        <MudButton StartIcon="@Icons.Material.Filled.ShoppingBasket" Variant="Variant.Text" Href="@($"cartItems/{item.Id}")" Color="Color.Inherit">@item.Title</MudButton>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" OnClick="@(()=>{ selectedShopCart = item; OpenDrawer(Options.Setting);})" />
                    </CardHeaderActions>
                </MudCardHeader>

            </MudCard>
        </MudStack>
    }
}
@* ----Settings Drawer---- *@

<MudDrawer @bind-Open="@settingsDrawer" Anchor="Anchor.Bottom" Elevation="4" Variant="DrawerVariant.Temporary" Color="Color.Inherit" Breakpoint="Breakpoint.LgAndUp" Style="height: auto; max-height: 30vh;">
    <MudElement Class="d-flex flex-column flex-grow-1 ma-4 justify-content-center align-items-center">
        <MudDrawerHeader Class="pl-1">
            <MudText Typo="Typo.h6">Settings</MudText>
        </MudDrawerHeader>

        <MudElement Class="d-flex justify-space-around flex-grow-1 gap-8">
            <MudElement Class="icon-wrapper">
                <MudFab StartIcon="@Icons.Material.Filled.DriveFileRenameOutline" Size="Size.Large" Color="Color.Tertiary" OnClick="@( () => OpenDrawer(Options.Edit) )" />
                <MudText Class="mt-2" Typo="Typo.body2" Align="Align.Center">Edit</MudText>
            </MudElement>

            <MudElement Class="icon-wrapper" >
                <MudFab StartIcon="@Icons.Material.Filled.Share" Size="Size.Large" Color="Color.Info"  OnClick="@(() => OnShareList(selectedShopCart))" />
                <MudText Class="mt-2" Typo="Typo.body2" Align="Align.Center">Share</MudText>
            </MudElement>

            <MudElement Class="icon-wrapper" >
                <MudFab StartIcon="@Icons.Material.Filled.Delete" Size="Size.Large" Color="Color.Error" OnClick="@(() => DeleteCartAsync(selectedShopCart))" />
                <MudText Class="mt-2" Typo="Typo.body2" Align="Align.Center">Delete</MudText>
            </MudElement>

        </MudElement>
    </MudElement>
</MudDrawer>

@* ----Add---- *@
<MudDrawer @bind-Open="@newDrawer" Anchor="Anchor.Bottom" Elevation="3" Variant="@DrawerVariant.Temporary" Color="Color.Inherit">

    <DrawForm type="ObjectType.CartList" options="Options.New" AddAndEditShopCart="AddNewShopList" />

</MudDrawer>

@* ----Edit---- *@

<MudDrawer @bind-Open="@editDrawer" Anchor="Anchor.Bottom" Elevation="3" Variant="@DrawerVariant.Temporary" Color="Color.Inherit">

    <DrawForm ShopCart="@selectedShopCart" type="ObjectType.CartList" AddAndEditShopCart="UpdateCartAsync" options="@Options.Edit" />


</MudDrawer>


@code {
    bool hasError;
    public ShopCart selectedShopCart = new();
    private IEnumerable<ShopCart>? ShopListCart { get; set; }
    public string Message = string.Empty;
    bool newDrawer;
    bool settingsDrawer;
    bool editDrawer;
    void OpenDrawer(Options options)
    {
        if (options == Options.Edit)
        {
            settingsDrawer = false;
            newDrawer = false;
            editDrawer = true;

        }
        else if (options == Options.New)
        {
            settingsDrawer = false;
            editDrawer = false;
            newDrawer = true;


        }
        else if (options == Options.Setting)
        {
            editDrawer = false;
            newDrawer = false;
            settingsDrawer = true;

        }

    }
    protected async override Task OnInitializedAsync()
    {
        App.Current.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().UseWindowSoftInputModeAdjust(WindowSoftInputModeAdjust.Resize);

        await LoadShopListAsync();
    }

    private async Task OnShareList(ShopCart shopCart)
    {
        var itemList = new StringBuilder();
        itemList.AppendLine($"{shopCart.Title}");
        itemList.AppendLine("Items:");

        foreach (var item in shopCart.Items)
        {
            itemList.AppendLine($"- {item.ItemName}");
        }

        await Share.RequestAsync(new ShareTextRequest
            {
                
                Text = itemList.ToString()
            });


    }

    private async Task AddNewShopList(ShopCart shopCart)
    {
        if (shopCart != null)
        {
            try
            {
                await ShopCart.CreateAsync(shopCart);
                newDrawer = false;
                await LoadShopListAsync();

            }
            catch (Exception ex)
            {
                Message = ex.Message;
                hasError = true;
                StateHasChanged();
            }

        }
    }
    private async Task LoadShopListAsync()
    {
        hasError = false;
        try
        {
            ShopListCart = await ShopCart.GetAllasync();
            if (!ShopListCart.Any())
            {
                Message = "Add new cart";

            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Message = ex.Message;
            hasError = true;
            StateHasChanged();
        }

    }
    private async Task DeleteCartAsync(ShopCart shopCart)
    {
        await ShopCart.DeleteAsync(shopCart);
        settingsDrawer = false;
        await LoadShopListAsync();
    }

    private async Task UpdateCartAsync(ShopCart shopCart)
    {
        if (shopCart.Id != 0)
        {
            await ShopCart.UpdateAsync(shopCart);
            editDrawer = false;

        }
    }
}
