@inject IRecipe Recipe
@page "/description/{Id}"
@using SkiaSharp
@inject NavigationManager nav

<MudAppBar Color="Color.Inherit">
    <MudIcon Icon="@Icons.Material.Outlined.RamenDining" Color="Color.Inherit" />
    <MudText Class="ml-2" Typo="Typo.h6" Color="Color.Inherit">@_recipe.Title</MudText>
    <MudSpacer />
</MudAppBar>

<MudCard Class="mt-5 mx-2 page-content">
    <!-- Changed: Added page-content class for CSS adjustments -->
    @if (string.IsNullOrEmpty(_recipe.ImageStream))
    {
        <MudElement Class="d-flex my-2 justify-content-center align-items-center" Style="height: 100%;">
            <MudButton StartIcon="@Icons.Material.Filled.CloudUpload" IconSize="Size.Medium" Variant="Variant.Text" Style="width:50%;" Color="Color.Inherit" OnClick="ImageUpload">Upload image</MudButton>
        </MudElement>
    }
    else
    {
        <MudCardMedia Image="@_recipe.ImageStream" Height="160" />
    }

    <MudDivider />

    <MudCardActions Class="d-flex ">
        <MudText Class="ml-4">Detail</MudText>
        <MudSpacer />
        <MudIconButton Variant="Variant.Text" DisableRipple="false" Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" OnClick="@(() => OpenDrawer(Options.Setting))" />
    </MudCardActions>
    <MudCardContent>

        <MudElement Class="d-flex flex-column flex-grow-1 ma-1 mt-n4 content-wrapper">
            <!-- Changed: Added content-wrapper class for CSS adjustments -->
            <MudTextField @bind-Value="_recipe.Description" TextUpdateSuppression="false" Immediate="true" AutoGrow Lines="3" InputType="InputType.Text" InputMode="InputMode.text" Variant="Variant.Outlined"></MudTextField>
            <MudFab Class="mt-3" EndIcon="@Icons.Material.Filled.Save" OnClick="OnSaveDescription" Label="Save" Color="Color.Primary" />
        </MudElement>
    </MudCardContent>
</MudCard>

@* ----Drawer---- *@
<MudDrawer @bind-Open="@settingsDrawer" Anchor="Anchor.Bottom" Elevation="4" Variant="DrawerVariant.Temporary" Color="Color.Inherit" Breakpoint="Breakpoint.LgAndUp">
    <MudElement Class="d-flex flex-column flex-grow-1 ma-4">
        <MudDrawerHeader Class="pl-1">
            <MudText Typo="Typo.h6">Settings</MudText>
        </MudDrawerHeader>

        <MudFab Class="mb-3" EndIcon="@Icons.Material.Filled.DriveFileRenameOutline" OnClick="ImageUpload" Label="Upload image" Color="Color.Tertiary" />
        <MudFab EndIcon="@Icons.Material.Filled.Delete" Label="Delete image" Color="Color.Error" OnClick="DeleteImage" />
    </MudElement>
</MudDrawer>

@code {
    [Parameter] public string Id { get; set; }
    private Recipe _recipe = new();
    bool toggleText = false;
    bool settingsDrawer;

    protected async override Task OnInitializedAsync()
    {
        App.Current.On<Microsoft.Maui.Controls.PlatformConfiguration.Android>().UseWindowSoftInputModeAdjust(WindowSoftInputModeAdjust.Resize);
        _recipe = await Recipe.GetByIdAsync(Convert.ToInt32(Id));
    }

    void OpenDrawer(Options drawType)
    {
        if (drawType == Options.Setting)
        {
            settingsDrawer = true;
        }
    }

    private async Task OnSaveDescription()
    {
        await Recipe.UpdateAsync(_recipe);
        nav.NavigateTo("/");
    }

    private async void DeleteImage()
    {
        if (_recipe.Id != 0)
        {
            _recipe.ImageStream = string.Empty;
            await Recipe.UpdateAsync(_recipe);
            settingsDrawer = false;
            StateHasChanged();
        }
    }

    private async Task ImageUpload()
    {
        var image = await MediaPicker.PickPhotoAsync(new MediaPickerOptions { Title = "Select a photo" });
        if (image != null)
        {
            try
            {
                var stream = await image.OpenReadAsync();
                byte[] result;
                using (var streamReader = new MemoryStream())
                {
                    stream.CopyTo(streamReader);
                    result = streamReader.ToArray();
                }
                // Resize the image using SkiaSharp
                byte[] resizedImage = ResizeImage(result, 530, 310); // Resize to 800x800

                var imagePath = Convert.ToBase64String(resizedImage);
                imagePath = string.Format("data:image/png;base64,{0}", imagePath);

                _recipe.ImageStream = imagePath;
                await Recipe.UpdateAsync(_recipe);
                settingsDrawer = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                // Handle exception
            }
        }
    }
    private byte[] ResizeImage(byte[] imageData, int width, int height)
    {
        using (var inputStream = new MemoryStream(imageData))
        {
            using (var original = SKBitmap.Decode(inputStream))
            {
                float aspectRatio = Math.Min((float)width / original.Width, (float)height / original.Height);

                int newWidth = (int)(original.Width * aspectRatio);
                int newHeight = (int)(original.Height * aspectRatio);

                var info = new SKImageInfo(newWidth, newHeight);
                using (var resized = original.Resize(info, SKFilterQuality.Medium))
                {
                    if (resized == null)
                        return imageData;

                    using (var image = SKImage.FromBitmap(resized))
                    {
                        using (var outputStream = new MemoryStream())
                        {
                            image.Encode(SKEncodedImageFormat.Png, 75).SaveTo(outputStream);
                            return outputStream.ToArray();
                        }
                    }
                }
            }
        }
    }
}
